pub const CONE_DENSITY_MAX: f32 = 174.0 * 1000.0;
const CONE_DENSITIES: [(f32, f32); 104] = [
    (-75.0, 5.01),
    (-71.9154, 5.06),
    (-69.9816, 5.06),
    (-68.0468, 5.06),
    (-66.1126, 4.66),
    (-64.1784, 4.12),
    (-62.2439, 3.58),
    (-60.31, 3.04),
    (-58.3752, 2.9),
    (-56.4408, 2.91),
    (-54.5067, 2.91),
    (-52.5721, 2.91),
    (-50.6376, 2.92),
    (-48.7038, 2.92),
    (-46.7693, 2.92),
    (-44.8346, 2.66),
    (-42.9002, 2.66),
    (-40.9665, 2.66),
    (-39.0319, 2.85),
    (-37.0975, 2.94),
    (-35.1629, 2.95),
    (-33.2291, 2.95),
    (-31.2941, 3.09),
    (-29.3598, 3.91),
    (-27.4261, 4.55),
    (-25.4914, 4.05),
    (-23.5572, 4.33),
    (-21.6224, 4.06),
    (-19.6884, 4.02),
    (-17.7538, 3.52),
    (-15.8195, 3.53),
    (-13.8851, 4.17),
    (-11.9511, 5.85),
    (-10.0165, 8.21),
    (-8.2439, 10.95),
    (-6.8999, 14.35),
    (-5.8582, 17.93),
    (-5.1488, 22.34),
    (-4.0521, 26.1),
    (-2.924, 30.06),
    (-1.5737, 47.41),
    (-1.4233, 66.15),
    (-1.3914, 99.71),
    (-1.3226, 89.03),
    (-0.6674, 174.0),
    (0.139, 100.26),
    (0.3002, 90.45),
    (0.3, 61.03),
    (0.3002, 54.5),
    (0.7835, 40.97),
    (2.0729, 29.8),
    (2.2018, 25.95),
    (2.8789, 22.22),
    (3.524, 18.68),
    (4.2004, 15.01),
    (5.4583, 11.51),
    (7.3926, 8.11),
    (9.3266, 5.48),
    (11.261, 4.44),
    (13.4, 4.33),
    (13.4001, 0.0),
    (19.4999, 0.0),
    (19.5, 4.05),
    (22.2225, 4.14),
    (24.1571, 4.15),
    (26.0909, 4.02),
    (28.0253, 3.7),
    (29.9601, 3.61),
    (31.8944, 3.39),
    (33.8283, 3.08),
    (35.7625, 3.08),
    (37.697, 3.08),
    (39.6314, 3.09),
    (41.5659, 3.09),
    (43.5, 3.09),
    (45.4348, 3.51),
    (47.3686, 3.65),
    (49.3032, 3.24),
    (51.2377, 2.84),
    (53.1716, 2.34),
    (55.1064, 2.3),
    (57.0404, 2.12),
    (58.975, 2.03),
    (60.9095, 2.04),
    (62.844, 2.4),
    (64.7782, 3.13),
    (66.7122, 3.18),
    (68.6465, 2.87),
    (70.5808, 2.87),
    (72.5153, 2.88),
    (74.45, 2.84),
    (76.3838, 2.11),
    (78.3183, 1.03),
    (80.2532, 1.21),
    (82.1876, 1.94),
    (84.1218, 2.44),
    (86.0558, 2.63),
    (87.9903, 2.5),
    (89.9248, 2.64),
    (91.8591, 3.78),
    (93.7934, 4.78),
    (95.7274, 5.96),
    (97.6618, 8.92),
    (100.0, 11.26),
];

pub const ROD_DENSITY_MAX: f32 = 162.0 * 1000.0;
const ROD_DENSITIES: [(f32, f32); 153] = [
    (-75.0, 31.39),
    (-74.011, 39.96),
    (-73.5275, 43.55),
    (-73.2052, 50.43),
    (-72.3993, 55.53),
    (-71.4326, 58.86),
    (-69.6267, 64.82),
    (-67.0796, 71.93),
    (-63.5334, 76.99),
    (-59.6649, 80.18),
    (-55.7962, 81.74),
    (-53.8618, 82.69),
    (-51.9279, 84.02),
    (-49.9933, 86.8),
    (-48.5884, 90.11),
    (-47.575, 93.9),
    (-46.6082, 97.73),
    (-45.641, 101.33),
    (-44.8349, 104.74),
    (-43.5453, 108.16),
    (-41.9332, 111.4),
    (-39.9991, 113.95),
    (-38.0644, 115.59),
    (-36.13, 117.05),
    (-34.1962, 118.56),
    (-32.2615, 120.29),
    (-30.327, 122.43),
    (-28.5541, 124.99),
    (-26.9881, 127.84),
    (-25.9747, 131.46),
    (-25.1688, 134.62),
    (-24.492, 137.78),
    (-23.5891, 141.49),
    (-22.8804, 145.05),
    (-21.9772, 148.32),
    (-20.8167, 152.2),
    (-19.0439, 154.82),
    (-17.1096, 154.55),
    (-15.4973, 152.46),
    (-14.5299, 148.73),
    (-13.5628, 144.59),
    (-12.6278, 140.53),
    (-11.9513, 136.97),
    (-11.4671, 133.58),
    (-10.984, 129.48),
    (-10.3393, 125.09),
    (-10.0165, 121.33),
    (-10.0168, 118.33),
    (-9.3717, 114.42),
    (-9.0496, 109.32),
    (-8.7269, 105.5),
    (-8.4045, 101.81),
    (-7.7602, 97.92),
    (-7.4379, 94.23),
    (-7.1154, 90.68),
    (-6.5669, 85.86),
    (-6.1154, 81.33),
    (-5.8255, 77.37),
    (-5.6643, 72.86),
    (-5.181, 68.31),
    (-4.536, 63.3),
    (-4.2139, 59.48),
    (-3.988, 55.55),
    (-3.569, 51.15),
    (-3.4079, 47.56),
    (-3.0855, 44.28),
    (-2.6015, 39.45),
    (-2.2793, 35.04),
    (-1.9569, 31.05),
    (-1.6667, 26.71),
    (-1.3444, 21.52),
    (-1.0222, 16.39),
    (0.0, 0.0),
    (0.7835, 22.25),
    (0.7837, 15.79),
    (0.8481, 26.55),
    (1.1062, 30.4),
    (1.3364, 33.97),
    (1.9117, 43.06),
    (2.234, 48.58),
    (2.589, 54.03),
    (2.9114, 59.41),
    (3.2017, 65.87),
    (3.3628, 70.69),
    (3.8781, 74.79),
    (4.1684, 79.34),
    (4.4907, 83.33),
    (4.8136, 88.86),
    (4.9742, 93.09),
    (5.1354, 96.85),
    (5.4578, 100.47),
    (5.7802, 103.95),
    (6.1352, 107.95),
    (6.425, 111.6),
    (7.1025, 118.06),
    (7.3927, 122.19),
    (8.0376, 126.56),
    (8.682, 131.43),
    (9.4883, 136.39),
    (10.2939, 139.54),
    (10.9707, 142.98),
    (13.4, 145.68),
    (13.4001, 0.0),
    (19.4999, 0.0),
    (19.5, 149.75),
    (20.1267, 153.83),
    (20.9007, 157.86),
    (21.9002, 162.0),
    (23.5119, 161.14),
    (24.8012, 157.86),
    (25.7457, 154.28),
    (27.7034, 151.04),
    (29.6375, 148.31),
    (31.5717, 145.95),
    (33.5062, 144.04),
    (35.4408, 142.41),
    (37.3748, 141.0),
    (39.3089, 139.18),
    (41.2436, 137.18),
    (43.1783, 134.64),
    (45.1121, 131.86),
    (47.0469, 128.95),
    (48.9808, 125.82),
    (50.5926, 122.88),
    (51.8821, 119.68),
    (52.6882, 116.56),
    (53.9318, 112.73),
    (55.4285, 109.03),
    (57.0406, 105.71),
    (58.9747, 103.71),
    (60.9098, 100.98),
    (62.844, 97.57),
    (64.6166, 94.14),
    (66.3904, 91.02),
    (68.3245, 87.8),
    (70.2587, 85.39),
    (72.1928, 83.89),
    (74.1275, 82.62),
    (76.0615, 81.07),
    (77.9959, 79.44),
    (79.9305, 77.94),
    (81.8648, 76.49),
    (83.7989, 75.72),
    (85.7333, 74.31),
    (87.6679, 71.4),
    (89.4414, 68.23),
    (90.8917, 64.85),
    (91.9739, 61.11),
    (92.9872, 57.39),
    (94.0835, 54.31),
    (95.4049, 51.07),
    (97.3399, 49.84),
    (100.0, 49.78),
];

/// Computes the receptor density after Ã˜sterberg, 1935.
///
/// The support points of this interpolation were digitized from a plot.
/// Eccentricity is in degree, densities are per mm^2.
pub fn osterberg(eccentricity: f32) -> (f32, f32) {
    fn lerp(samples: &[(f32, f32)], x: f32) -> f32 {
        if x < samples.first().unwrap().0 || x > samples.last().unwrap().0 {
            0.0
        } else {
            let sample_idx = samples.iter().position(|&s| x < s.0).unwrap();
            if sample_idx == 0 {
                samples[sample_idx].1
            } else {
                let (x0, y0) = samples[sample_idx - 1];
                let (x1, y1) = samples[sample_idx];
                (y0 * (x1 - x) + y1 * (x - x0)) / (x1 - x0)
            }
        }
    }

    let cone_density = lerp(&CONE_DENSITIES, eccentricity) * 1000.0;
    let rod_density = lerp(&ROD_DENSITIES, eccentricity) * 1000.0;

    (cone_density, rod_density)
}
